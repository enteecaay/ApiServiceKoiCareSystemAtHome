// <auto-generated />
using System;
using Domain.Models.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(KoiCareSystemAtHomeContext))]
    partial class KoiCareSystemAtHomeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("BlogId")
                        .HasName("PK__Blogs__54379E50F8B648A7");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Domain.Models.Entity.BlogComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId")
                        .HasName("PK__BlogComm__C3B4DFCA9EAB0407");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("Domain.Models.Entity.BlogImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("BlogId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId")
                        .HasName("PK__Blog_Ima__7516F4ECEE409C37");

                    b.HasIndex("BlogId");

                    b.ToTable("Blog_Image", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("TotalAmount");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__18103112");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartId");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("TotalPrice");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK__Cart__Product__08D097C1B825DECE");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2BD3B2F4B4");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.KoiImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("KoiId");

                    b.HasKey("ImageId")
                        .HasName("PK__Koi_Imag__7516F4ECE51D9912");

                    b.HasIndex("KoiId");

                    b.ToTable("Koi_Image", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.KoiRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("KoiId");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("RecordId")
                        .HasName("PK__Koi_Reco__FBDF78C91A7A637C");

                    b.HasIndex("KoiId");

                    b.HasIndex("UserId");

                    b.ToTable("Koi_Record", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("NewsId")
                        .HasName("PK__News__954EBDD35052CA30");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Domain.Models.Entity.NewsImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("NewsId");

                    b.HasKey("ImageId")
                        .HasName("PK__News_Ima__7516F4ECEE8774FD");

                    b.HasIndex("NewsId");

                    b.ToTable("News_Image", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<bool>("isVipUpgrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF8E052D03");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Models.Entity.OrderVipDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<int>("VipId")
                        .HasColumnType("int")
                        .HasColumnName("VipId");

                    b.HasKey("OrderId", "VipId")
                        .HasName("PK__OrderDet__08D097C1B825BACA");

                    b.HasIndex("VipId");

                    b.ToTable("OrderVipDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("VnpAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VnpBankCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VnpBankTranNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VnpCardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VnpOrderInfo")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("VnpPayDate")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("VnpResponseCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("VnpSecureHash")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VnpTmnCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VnpTransactionNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VnpTransactionStatus")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("VnpTxnRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__PaymentT__DC31C1F3AA967D38");

                    b.HasIndex("VnpOrderInfo")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("PaymentTransaction", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Pond", b =>
                {
                    b.Property<int>("PondId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("PondId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PondId"));

                    b.Property<float>("Depth")
                        .HasColumnType("real");

                    b.Property<int>("Drain")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PumpingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Skimmer")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("PondId")
                        .HasName("PK__Pond__D18BF854E0A136F2");

                    b.HasIndex("UserId");

                    b.ToTable("Pond", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6ED16BED1B0");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("ImageId")
                        .HasName("PK__Product___7516F4EC46AA123A");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Image", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Revenue", b =>
                {
                    b.Property<int>("RevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevenueId"));

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.HasKey("RevenueId")
                        .HasName("PK__Revenue__275F16DD1D3720ED");

                    b.HasIndex("OrderId");

                    b.ToTable("Revenue", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShopId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(2, 1)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Thumbnail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShopId")
                        .HasName("PK__Shop__67C556291A1379BC");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.ShopRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("RatingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasColumnName("ShopId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("RatingId")
                        .HasName("PK__ShopRating__C3905BAF8E052D03");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopRatings");
                });

            modelBuilder.Entity("Domain.Models.Entity.VipPackage", b =>
                {
                    b.Property<int>("VipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VipId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Options")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Options");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.HasKey("VipId")
                        .HasName("PK__VipP__B40CC6ED16BED2A9");

                    b.ToTable("VipPackage", null, t =>
                        {
                            t.HasCheckConstraint("CK_Options_AllowedValues", "[Options] IN (1, 6, 12)");
                        });
                });

            modelBuilder.Entity("Domain.Models.Entity.VipRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("VipRecordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("VipId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__VipR__B40CC6ED16BED2A9");

                    b.HasIndex("UserId");

                    b.HasIndex("VipId");

                    b.ToTable("VipRecord", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.WaterParameter", b =>
                {
                    b.Property<int>("MeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeasureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasureId"));

                    b.Property<double>("Ammonium")
                        .HasColumnType("float");

                    b.Property<double>("AmountFed")
                        .HasColumnType("float");

                    b.Property<double>("CarbonDioxide")
                        .HasColumnType("float");

                    b.Property<double>("CarbonHardness")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double>("Hardness")
                        .HasColumnType("float");

                    b.Property<double>("Nitrate")
                        .HasColumnType("float");

                    b.Property<double>("Nitrite")
                        .HasColumnType("float");

                    b.Property<double>("OutdoorTemp")
                        .HasColumnType("float");

                    b.Property<double>("Oxygen")
                        .HasColumnType("float");

                    b.Property<double>("PH")
                        .HasColumnType("float")
                        .HasColumnName("pH");

                    b.Property<double>("Phosphate")
                        .HasColumnType("float");

                    b.Property<int>("PondId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("PondId");

                    b.Property<double>("Salt")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("TotalChlorines")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeasureId")
                        .HasName("PK__Water_Pa__8C56D7606385B788");

                    b.HasIndex("PondId");

                    b.HasIndex("UserId");

                    b.ToTable("Water_Parameter", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Koi", b =>
                {
                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("KoiId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KoiId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Physique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PondId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("PondId");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("KoiId")
                        .HasName("PK__Koi__E03435B8C848C56F");

                    b.HasIndex("PondId");

                    b.HasIndex("UserId");

                    b.ToTable("Koi", (string)null);
                });

            modelBuilder.Entity("Domain.Models.KoiRemind", b =>
                {
                    b.Property<int>("RemindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RemindId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RemindId"));

                    b.Property<DateTime>("DateRemind")
                        .HasColumnType("datetime");

                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("KoiId");

                    b.Property<string>("RemindDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RemindId")
                        .HasName("PK__Koi_Remi__C0874AB53A9C5B68");

                    b.HasIndex("KoiId");

                    b.HasIndex("UserId");

                    b.ToTable("Koi_Remind", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__OrderDet__08D097C1B825DECE");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entity.Blog", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Blogs__UserID__59063A47");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Models.Entity.BlogComment", b =>
                {
                    b.HasOne("Domain.Models.Entity.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BlogComme__BlogI__628FA481");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BlogComme__UserI__6D0D32F4");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Models.Entity.BlogImage", b =>
                {
                    b.HasOne("Domain.Models.Entity.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Blog_Imag__BlogI__68487DD7");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Models.Entity.Cart", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Models.Entity.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Entity.CartItem", b =>
                {
                    b.HasOne("Domain.Models.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CartItem__Cart__5CD6CB2B");

                    b.HasOne("Domain.Models.Entity.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CartItems__Product__5DCAEF64");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Entity.KoiImage", b =>
                {
                    b.HasOne("Domain.Models.Koi", "Koi")
                        .WithMany("KoiImages")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Koi_Image__KoiID__4BAC3F29");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("Domain.Models.Entity.KoiRecord", b =>
                {
                    b.HasOne("Domain.Models.Koi", "Koi")
                        .WithMany("KoiRecords")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Koi_Recor__KoiID__48CFD27E");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("KoiRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Koi_Recor__UserI__4E88ABD4");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("Domain.Models.Entity.News", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__News__Users__6B24EA83");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Entity.NewsImage", b =>
                {
                    b.HasOne("Domain.Models.Entity.News", "News")
                        .WithMany("NewsImages")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__News_Imag__NewsI__6B24EA82");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Domain.Models.Entity.Order", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__UserID__628FA481");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Models.Entity.OrderVipDetail", b =>
                {
                    b.HasOne("Domain.Models.Entity.Order", "Order")
                        .WithMany("OrderVipDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__OrderVip__5CD6CB2B");

                    b.HasOne("Domain.Models.Entity.VipPackage", "VipPackage")
                        .WithMany("OrderVipDetails")
                        .HasForeignKey("VipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__VipPackage__OrderVip__5CD6CB2B");

                    b.Navigation("Order");

                    b.Navigation("VipPackage");
                });

            modelBuilder.Entity("Domain.Models.Entity.PaymentTransaction", b =>
                {
                    b.HasOne("Domain.Models.Entity.Order", "Order")
                        .WithOne("PaymentTransaction")
                        .HasForeignKey("Domain.Models.Entity.PaymentTransaction", "VnpOrderInfo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("userId")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentTran__AppliUser__5DCAEF70");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Entity.Pond", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Ponds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Pond__UserID__398D8EEE");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Models.Entity.Product", b =>
                {
                    b.HasOne("Domain.Models.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__Categor__3C69FB99");

                    b.HasOne("Domain.Models.Entity.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Product__Shop__3F466844");

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Domain.Models.Entity.ProductImage", b =>
                {
                    b.HasOne("Domain.Models.Entity.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Product_I__Produ__3F466844");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Entity.Revenue", b =>
                {
                    b.HasOne("Domain.Models.Entity.Order", "Order")
                        .WithMany("Revenues")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Revenue__OrderID__656C112C");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Models.Entity.Shop", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "User")
                        .WithOne("Shop")
                        .HasForeignKey("Domain.Models.Entity.Shop", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Entity.ShopRating", b =>
                {
                    b.HasOne("Domain.Models.Entity.Shop", "Shop")
                        .WithMany("ShopRatings")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ShopRating__ShopID__59063A47");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("ShopRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ShopRating__UserID__628FA481");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Domain.Models.Entity.VipRecord", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", "User")
                        .WithMany("VipRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__VipRecord__User__3C69FB99");

                    b.HasOne("Domain.Models.Entity.VipPackage", "VipPackage")
                        .WithMany("VipRecords")
                        .HasForeignKey("VipId")
                        .IsRequired()
                        .HasConstraintName("FK__VipRecord__VipPackage__3C69FB99");

                    b.Navigation("User");

                    b.Navigation("VipPackage");
                });

            modelBuilder.Entity("Domain.Models.Entity.WaterParameter", b =>
                {
                    b.HasOne("Domain.Models.Entity.Pond", "Pond")
                        .WithMany("WaterParameters")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Water_Par__PondI__5535A963");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("WaterParameters")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Water_Par__UserI__5DCAEF64");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("Domain.Models.Koi", b =>
                {
                    b.HasOne("Domain.Models.Entity.Pond", "Pond")
                        .WithMany("Kois")
                        .HasForeignKey("PondId")
                        .IsRequired()
                        .HasConstraintName("FK__Koi__PondID__45F365D3");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("Kois")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Koi__UserID__4AB81AF0");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("Domain.Models.KoiRemind", b =>
                {
                    b.HasOne("Domain.Models.Koi", "Koi")
                        .WithMany("KoiReminds")
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Koi_Remin__KoiID__4E88ABD4");

                    b.HasOne("Domain.Models.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany("KoiReminds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Koi_Remin__UserI__5535A963");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("Domain.Models.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__5CD6CB2B");

                    b.HasOne("Domain.Models.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Produ__5DCAEF64");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Entity.ApplicationUser", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("Blogs");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("KoiRecords");

                    b.Navigation("KoiReminds");

                    b.Navigation("Kois");

                    b.Navigation("News");

                    b.Navigation("Orders");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("Ponds");

                    b.Navigation("Shop");

                    b.Navigation("ShopRatings");

                    b.Navigation("VipRecords");

                    b.Navigation("WaterParameters");
                });

            modelBuilder.Entity("Domain.Models.Entity.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("Domain.Models.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Models.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.Entity.News", b =>
                {
                    b.Navigation("NewsImages");
                });

            modelBuilder.Entity("Domain.Models.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderVipDetails");

                    b.Navigation("PaymentTransaction")
                        .IsRequired();

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("Domain.Models.Entity.Pond", b =>
                {
                    b.Navigation("Kois");

                    b.Navigation("WaterParameters");
                });

            modelBuilder.Entity("Domain.Models.Entity.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Domain.Models.Entity.Shop", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ShopRatings");
                });

            modelBuilder.Entity("Domain.Models.Entity.VipPackage", b =>
                {
                    b.Navigation("OrderVipDetails");

                    b.Navigation("VipRecords");
                });

            modelBuilder.Entity("Domain.Models.Koi", b =>
                {
                    b.Navigation("KoiImages");

                    b.Navigation("KoiRecords");

                    b.Navigation("KoiReminds");
                });
#pragma warning restore 612, 618
        }
    }
}
